-- По зададен клиент да се изкарат всички продажби с дата и обща сума на артикулите по продажбите
CREATE FUNCTION LIST_ORDERS_FROM_CLIENT(P_CLIENTID INTEGER)
RETURNS TABLE (ORDER_DATE DATE,FINAL_ORDER_PRICE DOUBLE)
RETURN
    SELECT S.DATE_OF_COMPLETION,DECIMAL(SUM(TOTALPRICE),9,2)
        FROM FN45449.SALES S, FN45449.PRODUCTS_SOLD PR
        WHERE PR.SALEID=S.SALEID
        GROUP BY S.DATE_OF_COMPLETION;

--За всички продажби на даден служител извежда датата и клиента към когото е продажбата.
CREATE FUNCTION SALES_FROM_USER_BY_DATE(P_USERID INTEGER )
RETURNS TABLE(DATE_OF_PURCHASE DATE, CLIENT_NAME VARCHAR(40))
RETURN
    SELECT S.DATE_OF_COMPLETION, C.NAME FROM FN45449.SALES S
    JOIN FN45449.CLIENTS C ON S.CLIENTID=C.CLIENTID
    WHERE P_USERID=S.USERID;

--Връща името на клиент по дадено id.
CREATE FUNCTION CLIENT_NAME_BY_ID(CL_ID INTEGER)
RETURNS VARCHAR(40)
RETURN
    SELECT C.NAME FROM FN45449.CLIENTS C
    WHERE C.CLIENTID=CL_ID;

--Връща досегашните приходи от дадения клиент
CREATE FUNCTION INCOME_FROM_CLIENT(P_CLIENTID INTEGER)
RETURNS DOUBLE
RETURN
    SELECT SUM(TOTALPRICE) FROM PRODUCTS_SOLD WHERE
    SALEID IN (SELECT SALEID FROM FN45449.SALES
            WHERE CLIENTID=P_CLIENTID);

--Използва горната функция за да открие по даден кортеж от Products_Sold на кой клиент се продава стоката
--и връща сумата от неговите покупки досега. Функцията е създадена с цел да се използва в тригер.
CREATE FUNCTION TRACE_CLIENT_AND_CHECK_INCOME(P_REGID INTEGER)
RETURNS DOUBLE
RETURN
    SELECT  FN45449.INCOME_FROM_CLIENT(S.CLIENTID)
    FROM FN45449.SALES S WHERE S.SALEID=P_REGID;


--Дава информация за оборота от даден продукт
CREATE OR REPLACE FUNCTION INCOME_FROM_PRODUCT(P_PRODID INTEGER)
RETURNS TABLE (TOTAL_INCOME DOUBLE,TOTAL_QUANTITY DOUBLE)
RETURN
    SELECT SUM(TOTALPRICE),SUM(QUANTITY)FROM FN45449.PRODUCTS_SOLD PR
    WHERE PR.PRODUCTID=P_PRODID;

--Аналог на Trace_Client, посочва служителя, който е свързан с дадената пратка
CREATE FUNCTION TRACE_USER(P_REGID INTEGER)
RETURNS INTEGER
RETURN
    SELECT U.USERID FROM FN45449.USERS U, FN45449.PRODUCTS_SOLD PR,FN45449.SALES S
    WHERE PR.SALEID=S.SALEID AND P_REGID=PR.REGID AND U.USERID=S.USERID;

--Извежда всички отделни покупки в една поръчка.
CREATE FUNCTION CHECK_PRODUCTS_IN_SALE(P_SALEID INTEGER)
RETURNS TABLE (PROD_NAME VARCHAR(60),SOLD_QUANT DOUBLE,CONTRACT_PRICE DOUBLE)
RETURN
    SELECT NAME,QUANTITY,TOTALPRICE
    FROM FN45449.PRODUCTS_SOLD,FN45449.PRODUCTS
    WHERE PRODUCTS.PRODUCTID=PRODUCTS_SOLD.PRODUCTID
    AND PRODUCTS_SOLD.SALEID=P_SALEID;

--По зададен id на продукт посочва описанието му, сумарното количество и цена които са продадени от него
CREATE FUNCTION CHECK_TOTAL_SOLD_QUANTITIES(P_PRODID INTEGER)
RETURNS TABLE (PROD_NAME VARCHAR(60),TOTAL_QUANTITY DOUBLE,TOTAL_PRICE DOUBLE)
RETURN
    SELECT P.NAME,SUM(QUANTITY),SUM(TOTALPRICE)
    FROM FN45449.PRODUCTS_SOLD PR JOIN PRODUCTS P on PR.PRODUCTID = P.PRODUCTID
    WHERE PR.PRODUCTID=P_PRODID
    GROUP BY P.NAME;

--За даден клиент изкарва списък с всички продукти които е закупил заедно с тяхното сумарно количество и цена.
CREATE FUNCTION CHECK_SOLD_TO_CLIENT(P_CLIENTID INTEGER)
RETURNS TABLE (PROD_NAME VARCHAR(60),TOTAL_QUANTITY DOUBLE,TOTAL_PRICE DOUBLE)
RETURN
    SELECT P.NAME, SUM(QUANTITY),SUM(TOTALPRICE)
    FROM FN45449.PRODUCTS_SOLD PR JOIN FN45449.PRODUCTS P on PR.PRODUCTID = P.PRODUCTID
    JOIN FN45449.SALES S on PR.SALEID = S.SALEID
    WHERE S.CLIENTID=P_CLIENTID
    GROUP BY P.NAME;

